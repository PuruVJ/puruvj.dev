---
import BlogImage from '@components/BlogImage.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const works = await Promise.all(
	(await getCollection('work')).map(async ({ data, render }) => {
		const { Content } = await render();

		return { Content, ...data };
	}),
);
---

<BaseLayout title="work">
	<Fragment slot="head">
		<meta name="description" content="All of Puru's projects and work" />

		<meta property="og:description" content="All of Puru's projects and work" />
		<meta property="og:image" content={`https://puruvj.dev/og/work.png`} />
		<meta property="og:url" content={`https://puruvj.dev/work`} />
	</Fragment>

	<main>
		{
			works.map(({ title, url, repo, Content, cover_image }) => (
				<section>
					<div class="img-preview">
						<BlogImage src={cover_image} alt={title} widths={[600, 1000]} />
					</div>
					<div class="info-section">
						<div class="title">{title}</div>
						<div class="description">
							<Content />
						</div>
						<div class="links">
							{url && <a href={url}>demo</a>}
							{repo.url && <a href={repo.url}>source</a>}
						</div>
					</div>
				</section>
			))
		}
	</main>
</BaseLayout>

<style>
	main {
		margin-top: 1rem;

		display: grid;
		grid-template-rows: repeat(auto, 1fr);
		gap: 3rem;
	}

	section {
		display: grid;
		grid-template-columns: 1.2fr 2fr;

		border-radius: 1rem;
	}

	.img-preview {
		max-width: 100%;

		object-fit: contain;
	}

	.info-section {
		display: grid;
		grid-template-rows: auto 1fr auto;

		padding: 0 0 0 1rem;
	}

	.title {
		font-family: 'JetBrains Mono', monospace;
		font-weight: 500;
		font-size: 1.5rem;
		line-height: 1;
	}

	.links {
		font-size: 1.5rem;
	}

	main :global(a[href]) {
		--distance: calc(50% - 0.375rem);
		--opacity: 0.35;
		--duration: 100ms;
		--easing: ease-in-out;

		font-weight: 600 !important;

		padding: 0 0.25rem;

		background-image: linear-gradient(
			transparent 0%,
			transparent var(--distance),
			rgba(var(--app-color-primary-rgb), var(--opacity)) var(--distance),
			rgba(var(--app-color-primary-rgb), var(--opacity)) 100%
		);
		background-size: 100% 200%;
		background-position: 0 0;

		transition:
			color var(--duration) var(--easing),
			background-position var(--duration) var(--easing),
			background-image var(--duration) var(--easing),
			border-radius var(--duration) var(--easing),
			--opacity var(--duration) var(--easing);
	}

	main :global(a[href]:hover),
	main :global(a[href]:focus-visible) {
		background-position: 0 100%;

		color: var(--app-color-primary-contrast);
		font-weight: 600 !important;

		border-radius: 0.25rem;

		--opacity: 1;
	}

	@media screen and (max-width: 1000px) {
		section {
			grid-template-columns: 1fr;

			figure {
				width: 100% !important;
			}
		}

		.info-section {
			padding: 0;
		}

		.title {
			line-height: 1.618;
		}
	}
</style>
