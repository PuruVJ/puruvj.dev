---
import BlogImage from '@components/BlogImage.astro';
import ReadingProgress from '@components/ReadingProgress.svelte';
import TOC from '@components/TOC.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import { get_post, get_slug } from '@utils/blog';
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import { SERIES } from 'src/content/series';

const arr = await getCollection('blog');

const id = Astro.params.id;
const post = arr.find((post) => post.slug.includes(id))!;
const { title, cover_image, render_cover, series, date, reading_time } = await get_post(post);

const { Content, headings } = await post.render();

function validate_headings() {
	// VALIDATE HEADINGS, make sure no H1 is present
	const heading_levels = new Set<number>();
	for (const heading of headings) {
		if (heading.depth === 1) {
			throw new Error(`Heading with depth 1 is not allowed. Heading: ${heading.text}`);
		}

		heading_levels.add(heading.depth);
	}
	// Make sure we're not skipping any levels in between
	const sorted_levels = [...heading_levels].sort((a, b) => a - b);
	if (sorted_levels.length > 1)
		for (let i = 2; i <= Math.min(6, sorted_levels.length); i++) {
			const current_level = sorted_levels[i - 2];
			const next_level = sorted_levels[i - 1];
			if (next_level - current_level !== 1) {
				throw new Error(
					`Heading level ${current_level} is not followed by a level ${current_level + 1}`,
				);
			}
		}
}

validate_headings();

export const getStaticPaths = (async () => {
	const arr = await getCollection('blog');

	return arr.map((post) => ({
		params: { id: get_slug(post.slug) },
	}));
}) satisfies GetStaticPaths;
---

<BaseLayout title={`${title} | Puru`} background={false}>
	<TOC headings={headings} />
	<ReadingProgress client:load />

	<main>
		<div class="progress" aria-roledescription="progress">
			<div class="indicator" style="transform: scaleX({$readingProgress})"></div>
		</div>
		<span class="series">
			{
				series && (
					<>
						<mark>SERIES</mark> {SERIES[series]}
					</>
				)
			}
		</span>
		<h1>{title}</h1>
		<p>
			<time>{date}</time> &bull;
			<span>{reading_time} min read</span>
		</p>
		<article id="blog-content">
			{cover_image && render_cover && <BlogImage src={cover_image} alt={title} lazy={false} />}
			<Content />
		</article>
	</main>
</BaseLayout>

<style scoped>
	h1 {
		font-size: 2.618em;
	}

	p {
		margin: 0;
		font-family: 'JetBrains Mono Variable', monospace;
		font-weight: 500;
		font-size: 1.2rem;
		color: var(--app-color-primary);

		text-align: center;
	}

	#blog-content {
		font-size: 1.3rem;
		font-weight: 400 !important;
	}

	.series {
		font-size: 1.3rem;

		color: rgba(var(--app-color-dark-rgb), 0.6);

		letter-spacing: 1px;
		font-family: 'JetBrains Mono Variable', monospace;

		mark {
			font-family: 'Jetbrains Mono Variable', monospace;
			font-weight: 600;
		}
	}
</style>

<style is:global>
	pre.astro-code {
		--font-size: 1rem;
		border-radius: 0.6rem;
		overflow-x: auto;
		overflow-y: hidden;
		padding: 1rem;
		font-size: var(--font-size) !important;
		line-height: 1.3 !important;

		margin: 1.5rem 0;

		code {
			font-size: inherit;
			font-weight: 400;
			border-radius: inherit;
			overflow: inherit;
			background-color: inherit;
			padding: 0;
		}

		&::-webkit-scrollbar {
			background-color: rgba(244, 244, 244, 0.1);
			width: 15px;
			border-radius: 0 0 0.6rem 0.6rem;
		}

		&::-webkit-scrollbar-thumb {
			background-color: rgba(244, 244, 244, 0.8);
			border: 3px solid transparent;
			border-radius: 8px;
			background-clip: content-box;
			transition: all 200ms;
		}

		&::-webkit-scrollbar-thumb:hover {
			background-color: rgba(244, 244, 244, 1);
		}
	}

	code {
		background-color: rgba(var(--app-color-dark-rgb), 0.1);
		padding: 4px 4px;
		border-radius: 4px;
		font-family: 'JetBrains Mono Variable', monospace;
		font-size: 1rem;
	}

	@media screen and (max-width: 600px) {
		#blog-content h2 {
			font-size: calc(1.1 * 1.618rem);
		}

		#blog-content h1 {
			font-size: calc(1.1 * 2.618rem);
		}
	}

	#blog-content {
		strong {
			font-weight: 600;
		}

		h2 {
			font-size: calc(1.3 * 2.618rem);
			line-height: 1.2;
		}

		h3 {
			font-size: calc(1.3 * 1.618rem);
			line-height: 1.2;
		}

		h4 {
			font-size: calc(1.3rem);
			line-height: 1.2;
		}

		h3 a,
		h2 a,
		h1 a {
			font-weight: 600;
			margin-right: 0.7rem;
		}

		h2::before,
		h1::before,
		h3::before {
			display: block;
			content: ' ';
			margin-top: -3.2rem;
			height: 3.2rem;
			visibility: hidden;
		}

		.heading-link {
			user-select: none;
		}

		video {
			max-width: 100%;

			border-radius: 8px;
		}

		blockquote {
			margin: 0;
			padding-left: 1rem;
			border-left: solid 4px var(--app-color-primary);
			font-family: 'JetBrains Mono Variable', monospace;
			border-radius: 0 8px 8px 0;
			background-color: rgba(var(--app-color-dark-rgb), 0.05);

			a[href] {
				font-weight: 500 !important;
			}
		}

		.picture-container {
			margin: 1rem 0;
		}

		.astro-tweet-theme {
			margin: auto auto;
		}

		& :where(:not(.astro-tweet-theme)) a[href] {
			--distance: calc(50% - 0.375rem);
			--opacity: 0.35;
			--duration: 100ms;
			--easing: ease-in-out;

			font-weight: 600 !important;

			padding: 0 0.25rem;

			background-image: linear-gradient(
				transparent 0%,
				transparent var(--distance),
				rgba(var(--app-color-primary-rgb), var(--opacity)) var(--distance),
				rgba(var(--app-color-primary-rgb), var(--opacity)) 100%
			);
			background-size: 100% 200%;
			background-position: 0 0;

			transition:
				color var(--duration) var(--easing),
				background-position var(--duration) var(--easing),
				background-image var(--duration) var(--easing),
				border-radius var(--duration) var(--easing),
				--opacity var(--duration) var(--easing);

			&:hover,
			&:focus-visible {
				background-position: 0 100%;

				color: var(--app-color-primary-contrast);
				font-weight: 600 !important;

				border-radius: 0.25rem;

				--opacity: 1;
			}
		}
	}
</style>
