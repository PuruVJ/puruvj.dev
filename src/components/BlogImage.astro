---
import type { ImageMetadata } from 'astro';
import { getImage } from 'astro:assets';

interface Props {
	src: ImageMetadata;
	alt: string;
	lazy?: boolean;
	widths?: number[];
}

const { alt, src, widths } = Astro.props;

const is_gif = src.format === 'gif';

// AVIFs screw up gifs
const avif = is_gif
	? null
	: await getImage({
			src,
			format: 'avif',
			widths: widths ?? [1800, 1200, 600],
		});

const webp = await getImage({
	src,
	format: 'webp',
	widths: widths ?? [1800, 1200, 600],
});

const { loading: _, decoding: _1, ...attrs } = webp.attributes;
---

<!-- For some reason, putting lazy-load-image at top level just puts it out entirely and wraps it in a <p> tag -->
<div style="display: contents;">
	<lazy-load-image>
		<div class="lazy-image-container">
			<figure
				class:list={{
					gif: is_gif,
				}}
				style={`--aspect: ${src.width} / ${src.height};`}
			>
				<picture>
					{avif && <source type="image/avif" data-srcset={avif.srcSet.attribute} />}

					<source type="image/webp" data-srcset={webp.srcSet.attribute} />

					<img class:list={{ gif: is_gif }} data-src={webp.src} alt={alt} {...attrs} />
				</picture>
			</figure>
		</div>
	</lazy-load-image>
</div>

<script>
	let observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				if (!entry.isIntersecting) return;

				const target = entry.target as HTMLElement;

				const sources = Array.from(target.querySelectorAll('source'));

				if (!sources.length) return;

				const sources_remaining = sources.some((source) => source.hasAttribute('data-srcset'));
				if (!sources_remaining) {
					observer.unobserve(target);
					return;
				}

				for (const source of sources) {
					if (source.dataset.srcset) {
						source.setAttribute('srcset', source.dataset.srcset);
						source.removeAttribute('data-srcset');
					}
				}

				const img = target.querySelector('img');
				if (img) {
					img.setAttribute('src', img.dataset.src!);
					img.removeAttribute('data-src');

					img.addEventListener('load', () => {
						target.classList.add('loaded');
					});
				}
			});
		},
		{
			// We want to preload, so we'll load the image before it comes into viewport
			rootMargin: '400px',
			threshold: 0.01,
		},
	);

	class LazyLoadImage extends HTMLElement {
		connectedCallback() {
			observer.observe(this.querySelector('figure')!);
		}

		disconnectedCallback() {
			observer.unobserve(this.querySelector('figure')!);
		}
	}

	if (!customElements.get('lazy-load-image')) {
		customElements.define('lazy-load-image', LazyLoadImage);
	}
</script>

<style>
	.lazy-image-container {
		display: flex;
		justify-content: center;

		width: 100%;
	}

	lazy-load-image {
		display: contents;
	}

	figure {
		display: flex;
		position: relative;
		/* width: 100%; */
		aspect-ratio: var(--aspect, 16 / 9);

		border-radius: 0.75rem;

		margin: 0;

		width: 100%;
		height: auto;
		max-width: 100%;
		min-width: 0;

		&.gif {
			width: 33vw;
		}

		&.loaded::after {
			opacity: 0;
		}

		&::after {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: var(--app-color-primary);
			border-radius: inherit;
			opacity: 1;
			transition: opacity 200ms ease-in;

			z-index: 200;
		}

		@media screen and (max-width: 768px) {
			width: 100% !important;
		}
	}

	picture {
		display: contents;
	}

	img {
		width: 100%;
		height: auto;
		border-radius: 0.75rem;
	}
</style>
